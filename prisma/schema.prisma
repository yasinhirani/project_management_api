// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                             String    @id @default(uuid())
  clientName                     String    @map("client_name")
  email                          String
  contactNumber                  String    @map("contact_number")
  address                        String
  country                        String
  role                           String
  linkedinUrl                    String    @default("") @map("linkedin_url")
  facebookUrl                    String    @default("") @map("facebook_url")
  companyName                    String    @map("company_name")
  companyAddress                 String    @map("company_address")
  dateOfEstablishment            String    @map("date_of_establishment")
  industryType                   String[]  @map("industry_type")
  preferredCommunicationMethod   String[]  @map("preferred_communication_method")
  preferredCommunicationLanguage String[]  @map("preferred_communication_language")
  preferredMeetingTime           String    @map("preferred_meeting_time")
  annualRevenueRange             String    @map("annual_revenue_range")
  targetAudience                 String    @default("") @map("target_audience")
  referralSource                 String    @default("") @map("referral_source")
  clientExpectation              String    @default("") @map("client_expectation")
  projectIds                     String[]  @default([])
  contractDocuments              Json[]    @default([]) @map("contract_documents")
  createdAt                      DateTime  @default(now()) @map("created_at")
  updatedAt                      DateTime  @default(now()) @map("updated_at")
  projects                       Project[]

  @@map("clients")
}

model Project {
  id                   String            @id @default(uuid())
  projectName          String            @map("project_name")
  projectDescription   String            @map("project_description")
  projectType          String            @map("project_type")
  softwareCategory     String            @map("software_category")
  projectBudget        Json              @map("project_budget")
  projectBudgetType    String            @map("project_budget_type")
  assignedClientId     String            @map("assigned_client_id")
  assignedClient       Client            @relation(fields: [assignedClientId], references: [id])
  projectPriority      String            @map("project_priority")
  projectStatus        String            @map("project_status")
  startDate            String            @map("start_date")
  endDate              String            @map("end_date")
  projectLogo          Json              @default("{}") @map("project_logo")
  projectDocuments     Json[]            @map("project_documents")
  assignedResourcesIds String[]          @map("assigned_resources")
  assignedResources    StaffingDetails[]
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @default(now()) @map("updated_at")

  @@map("projects")
}

model CountriesList {
  id   Int    @id @default(autoincrement())
  name String
  code String

  @@map("countries_list")
}

model DomainList {
  id   Int    @id @default(autoincrement())
  name String @default("")

  @@map("domains_list")
}

model DesignationList {
  id   Int    @id @default(autoincrement())
  name String @default("")

  @@map("designations_list")
}

// model StaffingDetails {
//   id           String              @id @default(uuid())
//   domain       String
//   designations String[]
//   resourceIds  String[]
//   resources    AssignedResources[] @relation(fields: [resourceIds], references: [id])
//   project      Project?            @relation(fields: [projectId], references: [id])
//   projectId    String?

//   @@map("staffing_details")
// }

// model AssignedResources {
//   id                    String           @id @default(uuid())
//   projectId             String           @map("project_id")
//   employeeId            String           @map("employee_Id")
//   project_details       Project          @relation(fields: [projectId], references: [id])
//   employee_details      Employee         @relation(fields: [employeeId], references: [id])
//   allocatedHours        Json             @default("{}")
//   startDateOfAllocation String           @default("") @map("start_date_of_allocation")
//   endDateOfAllocation   String           @default("") @map("end_date_of_allocation")
//   StaffingDetails       StaffingDetails? @relation(fields: [staffingDetailsId], references: [id])
//   staffingDetailsId     String?

//   @@map("assigned_resources")
// }

model StaffingDetails {
  id                    String    @id @default(uuid())
  projectId             String    @map("project_id")
  resourceId            String    @map("resource_id")
  allocatedHours        Json      @default("{}") @map("allocated_hours")
  startDateOfAllocation String    @default("") @map("start_date_of_allocation")
  endDateOfAllocation   String    @default("") @map("end_date_of_allocation")
  isForcedStaffed       Boolean   @default(false) @map("is_forced_staffed")
  employeeDetails       Employee? @relation(fields: [resourceId], references: [id])
  projectDetails        Project?  @relation(fields: [projectId], references: [id])

  @@map("staffing_details")
}

model Employee {
  id                  String            @id @default(uuid())
  name                String
  emailId             String            @map("email_id")
  contactNumber       String            @map("contact_number")
  gender              String
  dateOfBirth         String            @map("date_of_birth")
  domain              String
  designation         String
  dateOfJoining       String            @map("date_of_joining")
  reportingManager    String            @map("reporting_manager")
  domainLead          String            @map("domain_lead")
  reportingOffice     String            @map("reporting_office")
  employmentType      String            @map("employment_type")
  employeeShift       String            @map("employee_shift")
  empCode             String            @map("emp_code")
  bloodGroup          String            @default("") @map("blood_group")
  maritalStatus       String            @default("") @map("marital_status")
  address             String            @default("")
  languages           Json[]            @default([])
  skills              Json[]            @default([])
  assignedProjectsIds String[]          @default([]) @map("assigned_project_ids")
  assignedProjects    StaffingDetails[]
  employeeDocuments   Json[]            @default([]) @map("employee_documents")
  workExperience      Json[]            @default([]) @map("work_experience")

  @@map("employees")
}
